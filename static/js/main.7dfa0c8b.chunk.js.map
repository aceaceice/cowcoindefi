{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","storageValue","accounts","contract","cowCoin","componentDidMount","eth","getAccounts","net","getId","networkId","buba","Token","networks","defiAddress","Defi","address","token","Contract","abi","defi","setState","runExample","alert","error","mintToken","methods","mint","send","from","amount","this","deposit","value","toString","withdraw","collateralEther","call","collateral","tokenBorrowed","approve","payOff","className","href","onSubmit","e","preventDefault","depositAmount","id","step","type","ref","input","placeholder","required","onClick","borrowAmount","borrow","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7dfa0c8b.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport Token from \"./contracts/Token.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Defi from \"./contracts/Defi.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    cowCoin: null,\n  };\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n\n      const accounts = await web3.eth.getAccounts();\n\n      const networkId = await web3.eth.net.getId();\n      const buba = Token.networks[networkId];\n      const defiAddress = Defi.networks[networkId];\n      console.log(buba.address);\n      const token = new web3.eth.Contract(Token.abi, buba && buba.address);\n      const defi = new web3.eth.Contract(\n        Defi.abi,\n        defiAddress && defiAddress.address\n      );\n      this.setState(\n        { web3, accounts, cowCoin: token, defi, defiAddress },\n        this.runExample\n      );\n    } catch (error) {\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  async deposit(amount) {\n    if (this.state.defi !== \"undefined\") {\n      try {\n        await this.state.defi.methods\n          .deposit()\n          .send({ value: amount.toString(), from: this.state.accounts[0] });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  async withdraw() {\n    if (this.state.defi !== \"undefined\") {\n      try {\n        await this.state.defi.methods\n          .withdraw()\n          .send({ from: this.state.accounts[0] });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  async borrow(amount) {\n    if (this.state.defi !== \"undefined\") {\n      try {\n        await this.state.defi.methods\n          .withdraw()\n          .send({ value: amount.toString(), from: this.state.accounts[0] });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  async payOff() {\n    if (this.state.defi !== \"undefined\") {\n      try {\n        const collateral = await this.state.defi.methods\n          .collateralEther(this.state.accounts[0])\n          .call({ from: this.state.accounts[0] });\n        const tokenBorrowed = collateral / 2;\n        await this.state.token.methods\n          .approve(this.state.defiAddress.address, tokenBorrowed.toString())\n          .send({ from: this.state.accounts[0] });\n        await this.state.defi.methods\n          .payOff()\n          .send({ from: this.state.accounts[0] });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  mintToken = async () => {\n    const { accounts, cowCoin } = this.state;\n    try {\n      await cowCoin.methods\n        .mint(accounts[0], 5000000000)\n        .send({ from: accounts[0] });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"app\">\n        <div>\n        <a href=\"https://github.com/aceaceice/cowcoindefi\">Github</a>\n        </div>\n        <h1>Cow bank</h1>\n        <h2>Stake your photons to earn COW COINS</h2>\n        <p>Deposit photons</p>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            let amount = this.depositAmount.value;\n            amount = amount * 10 ** 18;\n            this.deposit(amount);\n          }}\n        >\n          <div className=\"form-group mr-sm-2\">\n            <br></br>\n            <input\n              id=\"depositAmount\"\n              step=\"0.01\"\n              type=\"number\"\n              ref={(input) => {\n                this.depositAmount = input;\n              }}\n              className=\"form-control form-control-md\"\n              placeholder=\"amount...\"\n              required\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            DEPOSIT\n          </button>\n        </form>\n        <p>Withdraw</p>\n        <button\n          onClick={() => {\n            this.withdraw();\n          }}\n        >\n          WITHDRAW\n        </button>\n        <p>Borrow </p>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            let amount = this.borrowAmount.value;\n            amount = amount * 10 ** 18;\n            this.borrow(amount);\n          }}\n        >\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"borrowAmount\"\n              step=\"0.01\"\n              type=\"number\"\n              ref={(input) => {\n                this.borrowAmount = input;\n              }}\n              className=\"form-control form-control-md\"\n              placeholder=\"amount...\"\n              required\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            BORROW\n          </button>\n        </form>\n        <p>Pay off</p>\n        <button\n          onClick={() => {\n            this.payOff();\n          }}\n        >\n          PAYOFF\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}